{"ast":null,"code":"var _jsxFileName = \"/Users/raphaelsouzadeoliveira/Projetos/cubos/front-integral-m05-desafio-t04/front-desafio-final/src/components/Login/confirmPassword.jsx\";\nimport React from 'react';\nimport Button from '@mui/material/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst style = {\n  info: {\n    float: 'right'\n  }\n};\nexport default class CustomRulesForm extends React.Component {\n  constructor(props) {\n    super(props); // custom rule will have name 'isPasswordMatch'\n\n    this.handleChange = event => {\n      const {\n        formData\n      } = this.state;\n      formData[event.target.name] = event.target.value;\n\n      if (event.target.name === 'password') {\n        this.form.isFormValid(false);\n      }\n\n      this.setState({\n        formData\n      });\n    };\n\n    this.handleSubmit = () => {\n      this.setState({\n        submitted: true\n      }, () => {\n        setTimeout(() => this.setState({\n          submitted: false\n        }), 5000);\n      });\n    };\n\n    if (!ValidatorForm.hasValidationRule('isPasswordMatch')) {\n      ValidatorForm.addValidationRule('isPasswordMatch', value => {\n        const {\n          formData\n        } = this.state;\n\n        if (value !== formData.password) {\n          return false;\n        }\n\n        return true;\n      });\n    }\n\n    this.state = {\n      formData: {\n        password: '',\n        repeatPassword: ''\n      },\n      submitted: false\n    };\n  }\n\n  componentWillUnmount() {\n    if (ValidatorForm.hasValidationRule('isPasswordMatch')) {\n      ValidatorForm.removeValidationRule('isPasswordMatch');\n    }\n  }\n\n  render() {\n    const {\n      formData,\n      submitted\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(ValidatorForm, {\n      ref: r => this.form = r,\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: style.info,\n        children: ValidatorForm.hasValidationRule('isPasswordMatch') ? 'true' : 'false'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n        label: \"Password\",\n        onChange: this.handleChange,\n        name: \"password\",\n        type: \"password\",\n        validators: ['required'],\n        errorMessages: ['this field is required'],\n        value: formData.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n        label: \"Repeat password\",\n        onChange: this.handleChange,\n        name: \"repeatPassword\",\n        type: \"password\",\n        validators: ['isPasswordMatch', 'required'],\n        errorMessages: ['password mismatch', 'this field is required'],\n        value: formData.repeatPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        type: \"submit\",\n        disabled: submitted,\n        children: submitted && 'Your form is submitted!' || !submitted && 'Submit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/raphaelsouzadeoliveira/Projetos/cubos/front-integral-m05-desafio-t04/front-desafio-final/src/components/Login/confirmPassword.jsx"],"names":["React","Button","ValidatorForm","TextValidator","style","info","float","CustomRulesForm","Component","constructor","props","handleChange","event","formData","state","target","name","value","form","isFormValid","setState","handleSubmit","submitted","setTimeout","hasValidationRule","addValidationRule","password","repeatPassword","componentWillUnmount","removeValidationRule","render","r"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from '@mui/material/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\n\nconst style = {\n  info: {\n    float: 'right'\n  }\n};\n\nexport default class CustomRulesForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // custom rule will have name 'isPasswordMatch'\n    if (!ValidatorForm.hasValidationRule('isPasswordMatch')) {\n      ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n        const { formData } = this.state;\n        if (value !== formData.password) {\n          return false;\n        }\n        return true;\n      });\n    }\n\n    this.state = {\n      formData: {\n        password: '',\n        repeatPassword: ''\n      },\n      submitted: false\n    };\n  }\n\n  componentWillUnmount() {\n    if (ValidatorForm.hasValidationRule('isPasswordMatch')) {\n      ValidatorForm.removeValidationRule('isPasswordMatch');\n    }\n  }\n\n  handleChange = (event) => {\n    const { formData } = this.state;\n    formData[event.target.name] = event.target.value;\n    if (event.target.name === 'password') {\n      this.form.isFormValid(false);\n    }\n    this.setState({ formData });\n  };\n\n  handleSubmit = () => {\n    this.setState({ submitted: true }, () => {\n      setTimeout(() => this.setState({ submitted: false }), 5000);\n    });\n  };\n\n  render() {\n    const { formData, submitted } = this.state;\n    return (\n      <ValidatorForm ref={(r) => (this.form = r)} onSubmit={this.handleSubmit}>\n        <div style={style.info}>\n          {ValidatorForm.hasValidationRule('isPasswordMatch')\n            ? 'true'\n            : 'false'}\n        </div>\n        <TextValidator\n          label=\"Password\"\n          onChange={this.handleChange}\n          name=\"password\"\n          type=\"password\"\n          validators={['required']}\n          errorMessages={['this field is required']}\n          value={formData.password}\n        />\n        <br />\n        <TextValidator\n          label=\"Repeat password\"\n          onChange={this.handleChange}\n          name=\"repeatPassword\"\n          type=\"password\"\n          validators={['isPasswordMatch', 'required']}\n          errorMessages={['password mismatch', 'this field is required']}\n          value={formData.repeatPassword}\n        />\n        <br />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          type=\"submit\"\n          disabled={submitted}\n        >\n          {(submitted && 'Your form is submitted!') || (!submitted && 'Submit')}\n        </Button>\n      </ValidatorForm>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}